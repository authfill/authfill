/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as legalRouteRouteImport } from './routes/(legal)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as legalTermsRouteImport } from './routes/(legal)/terms'
import { Route as legalPrivacyRouteImport } from './routes/(legal)/privacy'
import { Route as legalImprintRouteImport } from './routes/(legal)/imprint'

const legalRouteRoute = legalRouteRouteImport.update({
  id: '/(legal)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const legalTermsRoute = legalTermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => legalRouteRoute,
} as any)
const legalPrivacyRoute = legalPrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => legalRouteRoute,
} as any)
const legalImprintRoute = legalImprintRouteImport.update({
  id: '/imprint',
  path: '/imprint',
  getParentRoute: () => legalRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof legalRouteRouteWithChildren
  '/imprint': typeof legalImprintRoute
  '/privacy': typeof legalPrivacyRoute
  '/terms': typeof legalTermsRoute
}
export interface FileRoutesByTo {
  '/': typeof legalRouteRouteWithChildren
  '/imprint': typeof legalImprintRoute
  '/privacy': typeof legalPrivacyRoute
  '/terms': typeof legalTermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(legal)': typeof legalRouteRouteWithChildren
  '/(legal)/imprint': typeof legalImprintRoute
  '/(legal)/privacy': typeof legalPrivacyRoute
  '/(legal)/terms': typeof legalTermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/imprint' | '/privacy' | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/imprint' | '/privacy' | '/terms'
  id:
    | '__root__'
    | '/'
    | '/(legal)'
    | '/(legal)/imprint'
    | '/(legal)/privacy'
    | '/(legal)/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  legalRouteRoute: typeof legalRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(legal)': {
      id: '/(legal)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof legalRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(legal)/terms': {
      id: '/(legal)/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof legalTermsRouteImport
      parentRoute: typeof legalRouteRoute
    }
    '/(legal)/privacy': {
      id: '/(legal)/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof legalPrivacyRouteImport
      parentRoute: typeof legalRouteRoute
    }
    '/(legal)/imprint': {
      id: '/(legal)/imprint'
      path: '/imprint'
      fullPath: '/imprint'
      preLoaderRoute: typeof legalImprintRouteImport
      parentRoute: typeof legalRouteRoute
    }
  }
}

interface legalRouteRouteChildren {
  legalImprintRoute: typeof legalImprintRoute
  legalPrivacyRoute: typeof legalPrivacyRoute
  legalTermsRoute: typeof legalTermsRoute
}

const legalRouteRouteChildren: legalRouteRouteChildren = {
  legalImprintRoute: legalImprintRoute,
  legalPrivacyRoute: legalPrivacyRoute,
  legalTermsRoute: legalTermsRoute,
}

const legalRouteRouteWithChildren = legalRouteRoute._addFileChildren(
  legalRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  legalRouteRoute: legalRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
