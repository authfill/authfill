/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TutorialRouteRouteImport } from './routes/tutorial/route'
import { Route as SetupRouteRouteImport } from './routes/setup/route'
import { Route as EmailsRouteRouteImport } from './routes/emails/route'
import { Route as AccountsRouteRouteImport } from './routes/accounts/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TutorialIndexRouteImport } from './routes/tutorial/index'
import { Route as SetupIndexRouteImport } from './routes/setup/index'
import { Route as AccountsIndexRouteImport } from './routes/accounts/index'
import { Route as TutorialCompleteRouteImport } from './routes/tutorial/complete'
import { Route as SetupCustomRouteImport } from './routes/setup/custom'
import { Route as SetupCompleteRouteImport } from './routes/setup/complete'
import { Route as EmailsIdRouteImport } from './routes/emails/$id'

const TutorialRouteRoute = TutorialRouteRouteImport.update({
  id: '/tutorial',
  path: '/tutorial',
  getParentRoute: () => rootRouteImport,
} as any)
const SetupRouteRoute = SetupRouteRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRouteImport,
} as any)
const EmailsRouteRoute = EmailsRouteRouteImport.update({
  id: '/emails',
  path: '/emails',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountsRouteRoute = AccountsRouteRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TutorialIndexRoute = TutorialIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TutorialRouteRoute,
} as any)
const SetupIndexRoute = SetupIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SetupRouteRoute,
} as any)
const AccountsIndexRoute = AccountsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountsRouteRoute,
} as any)
const TutorialCompleteRoute = TutorialCompleteRouteImport.update({
  id: '/complete',
  path: '/complete',
  getParentRoute: () => TutorialRouteRoute,
} as any)
const SetupCustomRoute = SetupCustomRouteImport.update({
  id: '/custom',
  path: '/custom',
  getParentRoute: () => SetupRouteRoute,
} as any)
const SetupCompleteRoute = SetupCompleteRouteImport.update({
  id: '/complete',
  path: '/complete',
  getParentRoute: () => SetupRouteRoute,
} as any)
const EmailsIdRoute = EmailsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => EmailsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRouteRouteWithChildren
  '/emails': typeof EmailsRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/tutorial': typeof TutorialRouteRouteWithChildren
  '/emails/$id': typeof EmailsIdRoute
  '/setup/complete': typeof SetupCompleteRoute
  '/setup/custom': typeof SetupCustomRoute
  '/tutorial/complete': typeof TutorialCompleteRoute
  '/accounts/': typeof AccountsIndexRoute
  '/setup/': typeof SetupIndexRoute
  '/tutorial/': typeof TutorialIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/emails': typeof EmailsRouteRouteWithChildren
  '/emails/$id': typeof EmailsIdRoute
  '/setup/complete': typeof SetupCompleteRoute
  '/setup/custom': typeof SetupCustomRoute
  '/tutorial/complete': typeof TutorialCompleteRoute
  '/accounts': typeof AccountsIndexRoute
  '/setup': typeof SetupIndexRoute
  '/tutorial': typeof TutorialIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/accounts': typeof AccountsRouteRouteWithChildren
  '/emails': typeof EmailsRouteRouteWithChildren
  '/setup': typeof SetupRouteRouteWithChildren
  '/tutorial': typeof TutorialRouteRouteWithChildren
  '/emails/$id': typeof EmailsIdRoute
  '/setup/complete': typeof SetupCompleteRoute
  '/setup/custom': typeof SetupCustomRoute
  '/tutorial/complete': typeof TutorialCompleteRoute
  '/accounts/': typeof AccountsIndexRoute
  '/setup/': typeof SetupIndexRoute
  '/tutorial/': typeof TutorialIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accounts'
    | '/emails'
    | '/setup'
    | '/tutorial'
    | '/emails/$id'
    | '/setup/complete'
    | '/setup/custom'
    | '/tutorial/complete'
    | '/accounts/'
    | '/setup/'
    | '/tutorial/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/emails'
    | '/emails/$id'
    | '/setup/complete'
    | '/setup/custom'
    | '/tutorial/complete'
    | '/accounts'
    | '/setup'
    | '/tutorial'
  id:
    | '__root__'
    | '/'
    | '/accounts'
    | '/emails'
    | '/setup'
    | '/tutorial'
    | '/emails/$id'
    | '/setup/complete'
    | '/setup/custom'
    | '/tutorial/complete'
    | '/accounts/'
    | '/setup/'
    | '/tutorial/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountsRouteRoute: typeof AccountsRouteRouteWithChildren
  EmailsRouteRoute: typeof EmailsRouteRouteWithChildren
  SetupRouteRoute: typeof SetupRouteRouteWithChildren
  TutorialRouteRoute: typeof TutorialRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tutorial': {
      id: '/tutorial'
      path: '/tutorial'
      fullPath: '/tutorial'
      preLoaderRoute: typeof TutorialRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emails': {
      id: '/emails'
      path: '/emails'
      fullPath: '/emails'
      preLoaderRoute: typeof EmailsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/accounts': {
      id: '/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tutorial/': {
      id: '/tutorial/'
      path: '/'
      fullPath: '/tutorial/'
      preLoaderRoute: typeof TutorialIndexRouteImport
      parentRoute: typeof TutorialRouteRoute
    }
    '/setup/': {
      id: '/setup/'
      path: '/'
      fullPath: '/setup/'
      preLoaderRoute: typeof SetupIndexRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/accounts/': {
      id: '/accounts/'
      path: '/'
      fullPath: '/accounts/'
      preLoaderRoute: typeof AccountsIndexRouteImport
      parentRoute: typeof AccountsRouteRoute
    }
    '/tutorial/complete': {
      id: '/tutorial/complete'
      path: '/complete'
      fullPath: '/tutorial/complete'
      preLoaderRoute: typeof TutorialCompleteRouteImport
      parentRoute: typeof TutorialRouteRoute
    }
    '/setup/custom': {
      id: '/setup/custom'
      path: '/custom'
      fullPath: '/setup/custom'
      preLoaderRoute: typeof SetupCustomRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/setup/complete': {
      id: '/setup/complete'
      path: '/complete'
      fullPath: '/setup/complete'
      preLoaderRoute: typeof SetupCompleteRouteImport
      parentRoute: typeof SetupRouteRoute
    }
    '/emails/$id': {
      id: '/emails/$id'
      path: '/$id'
      fullPath: '/emails/$id'
      preLoaderRoute: typeof EmailsIdRouteImport
      parentRoute: typeof EmailsRouteRoute
    }
  }
}

interface AccountsRouteRouteChildren {
  AccountsIndexRoute: typeof AccountsIndexRoute
}

const AccountsRouteRouteChildren: AccountsRouteRouteChildren = {
  AccountsIndexRoute: AccountsIndexRoute,
}

const AccountsRouteRouteWithChildren = AccountsRouteRoute._addFileChildren(
  AccountsRouteRouteChildren,
)

interface EmailsRouteRouteChildren {
  EmailsIdRoute: typeof EmailsIdRoute
}

const EmailsRouteRouteChildren: EmailsRouteRouteChildren = {
  EmailsIdRoute: EmailsIdRoute,
}

const EmailsRouteRouteWithChildren = EmailsRouteRoute._addFileChildren(
  EmailsRouteRouteChildren,
)

interface SetupRouteRouteChildren {
  SetupCompleteRoute: typeof SetupCompleteRoute
  SetupCustomRoute: typeof SetupCustomRoute
  SetupIndexRoute: typeof SetupIndexRoute
}

const SetupRouteRouteChildren: SetupRouteRouteChildren = {
  SetupCompleteRoute: SetupCompleteRoute,
  SetupCustomRoute: SetupCustomRoute,
  SetupIndexRoute: SetupIndexRoute,
}

const SetupRouteRouteWithChildren = SetupRouteRoute._addFileChildren(
  SetupRouteRouteChildren,
)

interface TutorialRouteRouteChildren {
  TutorialCompleteRoute: typeof TutorialCompleteRoute
  TutorialIndexRoute: typeof TutorialIndexRoute
}

const TutorialRouteRouteChildren: TutorialRouteRouteChildren = {
  TutorialCompleteRoute: TutorialCompleteRoute,
  TutorialIndexRoute: TutorialIndexRoute,
}

const TutorialRouteRouteWithChildren = TutorialRouteRoute._addFileChildren(
  TutorialRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountsRouteRoute: AccountsRouteRouteWithChildren,
  EmailsRouteRoute: EmailsRouteRouteWithChildren,
  SetupRouteRoute: SetupRouteRouteWithChildren,
  TutorialRouteRoute: TutorialRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
